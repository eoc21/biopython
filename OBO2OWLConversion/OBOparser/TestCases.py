'''
Created on Aug 25, 2009
Script to test all classes in this package.
@author: ed
'''
#import time
from OBOparser import *
from OBO2OWLConverter import *
class ConvertOBO2OWL():
    """
    Class to convert OBO file format to OWL.
    """
    def __init__(self,uri):
        """
        Instantiates an instance of an ConvertOBO2OWL object.
        Keyword arguments:
        uri -- uri of the OBO file.
        """
        self.uri = uri
        self.OWLOntology = OWLOntology()
        
    def convertOBO2OWL(self,outputOWLFile):
        """
        This converts OBO file from URI to OWL format.
        """
        f = open(outputOWLFile,'w')
        anOBOFile = OBOparser()
        anOBOFile.setUrl(self.uri)
        ontology = anOBOFile.createOntologyFromOBOFile(anOBOFile.readFile())
        headerInformation = ConstantHeader()
        #Convert header information
        f.write(self.OWLOntology.xmlDeclaration)
        self.OWLOntology.setXMLNameSpaceRDFConstruct()
        f.write(self.OWLOntology.rdfDeclarationOpen)
        for i in range(0,len(ontology.getAllMetaData())):
            self.processHeaderArgument(ontology.getAMetaDataInstance(i),headerInformation)
        #Convert terms
        for i in range(0,ontology.getNumTerms()):
            owlClass = ConvertTerm()
            aTerm = ontology.getTerm(i)
            if aTerm.id !="":
                owlClass.setTermId(aTerm.id,"",aTerm.isObsolete)
                owlClass.setName(aTerm.name)
                owlClass.convertAlternativeId(aTerm.altId)
                owlClass.setDefinition(aTerm.definition)
                owlClass.setComment(aTerm.comment)
                owlClass.convertSynonyms(aTerm.synonym)
                owlClass.convertRelatedSynonyms(aTerm.related_synonym)
                owlClass.convertExactSynonyms(aTerm.exactSynonym)
                owlClass.convertBroadSynonyms(aTerm.broadSynonym)
                owlClass.convertNarrowSynonyms(aTerm.narrowSynonym)
                owlClass.convertXrefAnalog(aTerm.xrefAnalog)
                owlClass.convertXref(aTerm.getAllXrefs())
            #Maybe issues with isA relation
            if aTerm.isA !="":
                owlClass.convertIsARelationships("", aTerm.isA)
            f.write(owlClass.termId)
            if owlClass.name !="":
                val = unicode(owlClass.name,"latin1")
                aNewString = val.decode()
                f.write(aNewString)
            if owlClass.definition !="":
                val = unicode(owlClass.definition,"latin1")
                aNewString = val.decode()
                f.write(aNewString)
            if owlClass.comment !="":
                f.write(owlClass.comment)
            if owlClass.isA !="":
                f.write(owlClass.isA)
                #Check to see if correct location for restriction, needs to be in subclass tags.
            if aTerm.relationship!="":
                owlClass.convertRelationshipTag(aTerm.relationship)
                f.write(owlClass.relationship)
            f.write(owlClass.closingTerm)
        #Add type def terms
        for i in range(0,ontology.getNumTypeDefTerms()):
            owlProperty = ConvertTypeDef()
            aProperty = ontology.getTypeDefTerm(i)
            owlProperty.convertTypeDefTitle(aProperty.id,aProperty.isObsolete)
            f.write(owlProperty.typeDef)
            f.write(owlProperty.endTag)
        f.write(self.OWLOntology.rdfCloseDeclaration)

    def processHeaderArgument(self,headerArgument,headerInformation):
        """
        Processes an individual header argument and return OWL format.
        Keyword arguments:
        headerArgument -- a line of the header.
        headerInformation -- list containing all header information.
        """
        values = headerArgument.split(":")
        if values[0] == "format-version":
            headerInformation.convertFormatVersion(values[1])
            self.OWLOntology.formatVersion = headerInformation.header
        elif values[0] == "date":
            headerInformation.convertDate(values[1])
            self.OWLOntology.date = headerInformation.date
        elif values[0] == "saved-by":
            headerInformation.convertSavedBy(values[1])
            self.OWLOntology.savedBy = headerInformation.savedBy
        elif values[0] == "auto-generated-by":
            headerInformation.convertAutoGeneratedBy(values[1])
            self.OWLOntology.autoGeneratedBy = headerInformation.autoGenerated
        elif values[0] == "default-namespace":
            headerInformation.convertNameSpace(values[1])
            self.OWLOntology.defaultNameSpace = headerInformation.ns
        elif values[0] == "namespace-id-rule":
            headerInformation.convertNameSpaceId(values[1])
            self.OWLOntology.nsIdRule = headerInformation.nsIdRule
        elif values[0] == "remark":
            headerInformation.convertRemark(values[1])
            self.OWLOntology.remark = headerInformation.remark
        elif values[0] == "typeRef":
            headerInformation.convertTypeRefs(values[1])
            self.OWLOntology.typeRef = headerInformation.typeRef
        elif values[0] == "version":
            headerInformation.convertDataVersion(values[1])
            self.OWLOntology.version = headerInformation.dataVersion
        elif values[0] == "subsetdef":
            headerInformation.convertSubsetDef(values[1])
            self.OWLOntology.subsetDef.append(headerInformation.subsetDef)

if __name__ == "__main__":
    #t0 = time.time() 
    converter = ConvertOBO2OWL("http://obo.cvs.sourceforge.net/*checkout*/obo/obo/ontology/anatomy/gross_anatomy/animal_gross_anatomy/amphibian/amphibian_anatomy.obo")
    converter.convertOBO2OWL("/home/ed/Desktop/Test.owl")
    #t1 = time.time()
    #elapsedTime = t1-t0
#print elapsedTime