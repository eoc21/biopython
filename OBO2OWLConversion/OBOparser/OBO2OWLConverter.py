'''
Created on Aug 19, 2009
Class to convert open biomedical ontology (OBO) files to web ontology language files (OWL). 
@author: ed
'''
class ConstantHeader():
    """
    This class represents the transformations required to map OBO header information 
    to OWL header information.
    """
    def __init__(self):
        """
        Instantiates an object of type ConstantHeader.
        """
        self.header = "<owl:Ontology rdf:about="+"\"#OBO\">"
        self.format = ""
        self.savedBy= ""
        self.autoGenerated = ""
        self.subsetDef = ""
        self.ns = ""
        self.remark = ""
        self.endTag = "</owl:Ontology>"
        self.owlImports = []
        self.date = ""
        self.dataVersion = ""
        self.nsIdRule = ""
        self.typeRef = ""
        
    def convertFormatVersion(self,formatVersion):
        """
        Converts OBO format version to OWL format.
        Keyword arguments:
        formatVersion -- The format version found in an OBO file i.e. 1.0 or 1.2.
        """
        self.format = "<mo:formatVersion>"+formatVersion+"</mo:formatVersion>"
        
    def convertSavedBy(self,savedBy):
        """
        Converts saved by tag to OWL format.
        Keyword arguments:
        savedBy -- The author who saved the OBO file.
        """    
        self.savedBy = "<mo:savedBy>"+savedBy+"</mo:savedBy>"
        
    def convertAutoGeneratedBy(self, autoGenerated):
        """
        Converts auto generated tag to OWL format.
        Keyword arguments:
        autoGenerated -- the auto generator e.g. OBO-Edit 1.101.
        """
        self.autoGenerated = "<mo:autoGeneratedBy>"+autoGenerated+"</mo:autoGeneratedBy>"
    
    def convertSubsetDef(self,subsetDef):
        """
        Converts subset def tag to OWL format.
        Keyword arguments:
        subsetDef -- subset definition e.g. phenotype_slim_wb.
        """
        self.subsetDef = "<mo:definedSubset rdf:resource=\"#"+subsetDef+"\"/>"
    
    def convertNameSpace(self,nameSpace):
        """
        Converts namespace to OWL format.
        Keyword arguments:
        nameSpace -- default name space for the OBO ontology.
        """
        self.ns = "<mo:defaultNamespace>"+nameSpace+"</mo:defaultNamespace>"
        
    def convertRemark(self,remark):
        """
        Converts remark to OWL format.
        Keyword arguments:
        remark -- header remark e.g. autogenerated-by 1.1.
        """
        self.remark = "<mo:remark>"+remark+"</mo:remark>"
        
    def convertTypeRefs(self,typeRefs):
        """
        Convert typeRefs to owl imports format.
        Keyword arguments:
        typeRefs --an OBO ID which references a representation of a type. 
        """
        for i in range(len(typeRefs)):
            owlImport = "<owl:imports>"+str(typeRefs[i])+"</owl:imports>"
            self.owlImports.append(owlImport)
     
    def convertDate(self,date):
        """
        Convert date to OWL format.
        Keyword arguments:
        date - date OBO ontology was last saved.
        """
        self.date = "<mo:savedDateTime>"+date+"</mo:savedDateTime>"
               
    def convertDataVersion(self,dataVersion):
        """
        Convert data version to OWL format.
        """
        self.dataVersion = "<mo:dataVersion>"+dataVersion+"</mo:dataVersion>"
        
    def convertNameSpaceId(self,nameSpaceIdValue):
        """
        Converts namespace -id - rule to OWL format.
        nameSpaceIdValue -- a name space.
        """
        self.nsIdRule = "<mo:namespace-id-rule>"+nameSpaceIdValue+"</mo:namespace-id-rule>"
    
class ConvertTerm():
    """
    This class converts an OBO term into an OWL class.
    """
    def __init__(self):
        """
        Instantiates an object of type ConvertTerm
        """
        self.termId = ""
        self.name = ""
        self.definition = ""
        self.comment = ""
        self.isA = ""
        self.related_synonym = []
        self.synonym = []
        self.exact_synonym = []
        self.broad_synonym = []
        self.narrow_synonym = []
        self.xrefAnalog = []
        self.closingTerm = ""
        self.altId = ""
        self.disjointFrom = []
        self.subset = []
        self.xref = []
        self.relationship = ""
        
    def setTermId(self,termId,nameSpace,obsolete):
        """
        Set term Id and namespace in OWL format.
        Keyword arguments:
        nameSpace -- a name space to use.
        obsolete -- is the class obsolete, if yes, converts to owl:DeprecatedClass.
        """
        if obsolete == "true":
            if nameSpace !="":
                self.termId = "<owl:DeprecatedClass rdf:about=\""+nameSpace+"#"+termId+"\">"
                self.closingTerm = "</owl:DeprecatedClass>"
            else:
                self.termId = "<owl:DeprecatedClass rdf:about=\""+"urn:obo-res"+"#"+termId+"\">"
                self.closingTerm = "</owl:DeprecatedClass>"
        else:
            if nameSpace !="":
                self.termId = "<owl:Class rdf:about=\""+nameSpace+"#"+termId+"\">"
                self.closingTerm = "</owl:Class>"
            else:
                self.termId = "<owl:Class rdf:about=\""+"urn:obo-res"+"#"+termId+"\">"
                self.closingTerm = "</owl:Class>"
    
    def setName(self,name):
        """
        Sets the name of the term in OWL format.
        Keyword arguments:
        name -- the name of the OBO term.
        """
        name = name.replace("<->","-")  #to process chebi.
        name = name.replace("&","and")  #for zebrafish anatomy.
        name = name.replace("<new term>","")  #issue with minimal anatomical terminology.
        name = name.replace("(?<=[KR])(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=R)(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=[FYWL])(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=M","")  #for Mass spectrometry.
        name = name.replace("((?<=D))|((?=D))","")  #for Mass spectrometry.
        name = name.replace("(?<=K)(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=K)","")  #for Mass spectrometry.
        name = name.replace("(?<=[FL])","")  #for Mass spectrometry.
        name = name.replace("(?<=[FYWLKR])(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=[KR])","")  #for Mass spectrometry.
        name = name.replace("(?<=[BDEZ])(?\!P)","")  #for Mass spectrometry.
        name = name.replace("(?<=[EZ])(?\!P)","")  #for Mass spectrometry.
        name = name.replace("<up>+/-</up>","")  #Fly taxonomy.
        name = name.replace("<3rd","3rd")  #Human phenotype ontology.
        name = name.replace("< 3rd","3rd")
        self.name = "<rdfs:label xml:lang=\"en\">"+name+"</rdfs:label>"
    
    def setDefinition(self,definition):
        """
        Sets the definition of the OBO term in OWL format.
        Keyword arguments:
        definition -- definition associated with an OBO term's "def" value.
        """
        definition = definition.replace("<->","")  #to process chebi.
        definition = definition.replace("<","")
        definition = definition.replace("&","and")  #for Drosophila gross anatomy.
        self.definition = "<mo:definition>"+definition+"</mo:definition>"
    
    def setComment(self,comment):
        """
        Sets rdf comment.
        Keyword arguments:
        comment -- comment associated with an OBO term.
        """
        comment = comment.replace("<http\://","")
        comment = comment.replace("&","and")  #for Drosophila gross anatomy.
        comment = comment.replace("'<'.","")
        comment = comment.replace(">.",">")
        comment = comment.replace("<this>","this")  #for phenotypic quality ontology.
        comment = comment.replace("<situs inversus>","situs inversus")
        comment = comment.replace("<protein_id>","protein_id")  #Seq type and features ontology.
        comment = comment.replace("<modified_base>","modified_base")  #Seq type and features ontology.
        comment = comment.replace("<sequence_id>","sequence_id")  #Seq type and features ontology.
        comment = comment.replace("(<40 amino acids)","(40 amino acids)")  #Seq type and features ontology.
        self.comment = "<rdfs:comment xml:lang=\"en\">"+comment+"</rdfs:comment>"
       
    def convertIsARelationships(self,nameSpace,isArelation):
        """
        Converts isA relation to subclass relation in OWL format.
        Keyword arguments:
        nameSpace -- a name space of the OBO ontology.
        isArelation -- OBO term associated with the is_a tag. 
        """
        if nameSpace=="":
            self.isA = "<rdfs:subClassOf rdf:resource=\""+"urn:obo-res"+"#"+isArelation+"\"/>"
        else:
            self.isA = "<rdfs:subClassOf rdf:resource=\""+nameSpace+"#"+isArelation+"\"/>"
      
    def convertRelatedSynonyms(self,relatedSynonyms):
        """
        Converts related synonyms to OWL format.
        Keyword arguments:
        relatedSynonyms -- list of related synonyms associated with an OBO term.
        """
        for i in range(len(relatedSynonyms)):
            owlRelatedSynonym = "<mo:relatedSynonym>"+str(relatedSynonyms[i])+"</mo:relatedSynonym>"
            self.related_synonym.append(owlRelatedSynonym)
        
    def convertSynonyms(self,synonyms):
        """
        Converts synonyms to OWL format.
        Keyword arguments:
        synonyms -- a list of synonyms associated with an OBO term.
        """
        for i in range(len(synonyms)):
            owlSynonym = "<mo:synonym>"+str(synonyms[i])+"</mo:synonym>"
            self.synonym.append(owlSynonym)
    
    def convertExactSynonyms(self,exactSynonyms):
        """
        Converts exact synonyms to OWL format.
        Keyword arguments:
        exactSynonyms -- a list of exact synonyms associated with an OBO term.
        """
        for i in range(len(exactSynonyms)):
            owlExactSynonym = "<mo:exactSynonym>"+str(exactSynonyms[i])+"</mo:exactSynonym>"
            self.exact_synonym.append(owlExactSynonym)
    
    def convertBroadSynonyms(self,broadSynonyms):
        """
        Converts broad synonyms to OWL format.
        Keyword arguments:
        broadSynonyms -- a list of broad synonyms associated with an OBO term.
        """
        for i in range(len(broadSynonyms)):
            owlBroadSynonym = "<mo:broadSynonym>"+str(broadSynonyms[i])+"</mo:broadSynonym>"
            self.broad_synonym.append(owlBroadSynonym)
            
    def convertNarrowSynonyms(self,narrowSynonyms):
        """
        Converts narrow synonyms to OWL format.
        Keyword arguments:
        narrowSynonyms -- a list of narrow synonyms associated with an OBO term.
        """
        for i in range(len(narrowSynonyms)):
            owlNarrowSynonym = "<mo:narrowSynonym>"+str(narrowSynonyms[i])+"</mo:narrowSynonym>"
            self.narrow_synonym.append(owlNarrowSynonym)
        
    def convertXrefAnalog(self,xrefAnalogs):
        """
        Converts xref analogs to OWL format.
        Keyword arguments:
        xrefAnalogs -- a list of cross reference analogs associated with an OBO term.
        """
        for i in range(len(xrefAnalogs)):
            owlXrefAnalog = "<mo:xrefAnalogous>"+str(xrefAnalogs[i])+"</mo:xrefAnalogous>"
            self.xrefAnalog.append(owlXrefAnalog)
    
    def convertAlternativeId(self,alternativeId):
        """
        Converts alternative id to OWL format.
        Keyword arguments:
        alternativeId -- value of altId tag associated with OBO term.
        """
        self.altId = "<mo:alternateID>"+alternativeId+"</mo:alternateID>"
       
    def convertDisjointFrom(self,disjointClasses):
        """
        TODO!!!
        Converts disjointFrom to OWL format.
        Keyword arguments:
        disjointClasses -- list of disjoint terms to the existing OBO term.
        """ 
        for i in range(len(disjointClasses)):
            owlDisjointClass = ""
    
    def convertSubset(self,subset):
        """
        Converts subset to OWL format.
        Keyword arguments:
        subset -- a collection of terms part of an ontology.
        """
        for i in range(len(subset)):
            owlSubset = "<mo:inSubset rdf:resource=\"#"+str(subset[i])+"\"/>"
            self.subset.append(owlSubset)
    
    def convertXref(self,xrefs):
        """
        Converts xrefs to OWL format.
        Keyword arguments:
        xrefs: cross references.
        """  
        for i in range(len(xrefs)):
            owlXref = "<mo:xref>"+str(xrefs[i])+"</mo:xref>"
            self.xref.append(owlXref)
    
    def convertRelationshipTag(self,relationShip):
        """
        Converts relationship tag to Owl:Restriction.
        Keyword arguments:
        relationship: how an OBO term relates to another OBO term.
        """
        separateComponents = relationShip.split("!")
        separateRelationshipComponents = str(separateComponents[0]).split(" ")
        self.relationship = "<rdfs:subClassOf>"+"\n"+"<owl:Restriction>"+"\n"+"<owl:onProperty rdf:resource =\"urn:obo-res#"+str(separateRelationshipComponents[0])+"\"/>"+"\n"
        self.relationship = self.relationship+"<owl:someValuesFrom rdf:resource = \"urn:obo-res#"+str(separateRelationshipComponents[1])+"\"/>"+"\n"+"</owl:Restriction>"+"\n"+"</rdfs:subClassOf>"
        
class ConvertTypeDef():
    """
    Converts OBO TYPEDEF into OWL Object Property.
    """   
    def __init__(self):
        """
        Instantiates an object of type ConvertTypeDef.
        """
        self.typeDef= ""
        self.endTag = "</owl:ObjectProperty>"
        self.deprecatedEndTag = "</owl:DeprecatedProperty>"
        self.name = ""
        self.isTransitive = ""
        self.isA = ""
        self.domain= ""
        self.range= ""
        self.isCyclic = ""
        self.isSymmetric = ""
        
    def convertTypeDefTitle(self,idValue,isObsolete):
        """
        Converts typeDef into OWL format.
        Keyword arguments:
        idValue -- typeDef id.
        isObsolete -- whether the isObsolete tag is set to true. 
        """
        if isObsolete =="true":
            self.typeDef = "<owl:DeprecatedProperty rdf:about=\"#"+idValue+"\""+">"
        else:
            self.typeDef = "<owl:ObjectProperty rdf:about=\"#"+idValue+"\""+">"
    
    def convertName(self,name):
        """
        Converts name to OWL format.
        Keyword arguments:
        name -- OBO typedef name.
        """
        self.name = "<mo:name>"+name+"</mo:name>"
    
    def convertIsTransitive(self,transitive):
        """
        Converts isTransitive to OWL format.
        Keyword arguments:
        transitive -- whether the term is_transitive is set to true.
        """
        self.isTransitive = "<mo:isTransitive>"+transitive+"</mo:isTransitive>"
    
    def convertIsA(self,isA):
        """
        Converts isA relation to OWL format.
        Keyword arguments:
        isA -- is_a tag for typedef.
        """
        self.isA = "<rdfs:subPropertyOf rdf:resource=\""+isA+"\"/>"
    
    def convertDomain(self,domain):
        """
        Converts domain to OWL format.
        Keyword arguments:
        domain -- domain for the typedef.
        """
        self.domain = "<rdfs:domain rdf: resources = \""+domain+"\"/>"

    def convertRange(self,range):
        """
        Converts range to OWL format.
        Keyword arguments:
        range -- range for typedef.
        """
        self.range = "<rdfs:range rdf:resource = \""+range+"\"/>"
        
    def convertIsCyclic(self,isCyclic):
        """
        Converts isCyclic to OWL format.
        Keyword arguments:
        isCyclic -- cyclic property of typedef.
        """
        self.isCyclic = "<mo:isCyclic>"+isCyclic+"</mo:isCyclic>"
        
    def convertIsSymmetric(self,isSymmetric):
        """
        Converts isSymmetric to OWL format.
        Keyword arguments:
        isSymmetric -- symmetric property of a typedef.
        """
        self.isSymmetric = "<mo:isSymmetric>"+isSymmetric+"</mo:isSymmetric>"

class OWLOntology():
    """
    This class represents and OWL ontology.
    """
    def __init__(self):
        """
        Instantiates an object of type OWLOntology.
        """
        self.xmlDeclaration = "<?xml version=\"1.0\"?>"
        self.rdfDeclarationOpen = ""
        self.headerInformation = []
        self.formatVersion = ""
        self.typeRef = ""
        self.version = ""
        self.date = ""
        self.savedBy = ""
        self.autoGeneratedBy = ""
        self.defaultNameSpace = ""
        self.remark = ""
        #Here an OBO term is an OWL Class.
        self.classes = []
        #Here an OBO typeDef is an OWL property.
        self.Properties = []
        self.nsIdRule=""
        self.headerSubsetDef = []
        self.closureTag = "</owl:Ontology>"
        self.rdfCloseDeclaration = "</rdf:RDF>"
        self.subsetDef = []
        self.docTypeDec=""
        self.annotationProperties=""
        
    def docTypeDeclaration(self):
        """
        Generated DOCTYPE declaration at top of owl file.
        """
        self.docTypeDec = "<!DOCTYPE rdf:RDF"+"\n"
        self.docTypeDec = self.docTypeDec+"[<!ENTITY rdf  \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">"+"\n"
        self.docTypeDec = self.docTypeDec+"<!ENTITY rdfs \"http://www.w3.org/2000/01/rdf-schema#\" >"+"\n"
        self.docTypeDec = self.docTypeDec+"<!ENTITY xsd  \"http://www.w3.org/2001/XMLSchema#\" >"+"\n"
        self.docTypeDec = self.docTypeDec+"<!ENTITY owl  \"http://www.w3.org/2002/07/owl#\" >"+"\n"
        self.docTypeDec = self.docTypeDec+"<!ENTITY mo  \"http://www.morphster.org/obo/meta-obo/1.0/mo#\" >"+"\n"+"]>"
        return self.docTypeDec
        
    def setXMLNameSpaceRDFConstruct(self):
        """
        Adds xmlns for RDF tag.
        """
        rdfns = "xmlns:rdf="+"\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\""
        owlns = "xmlns:owl="+"\"http://www.w3.org/2002/07/owl#\""
        xmlSchema = "xmlns:xsd="+"\"http://www.w3.org/2001/XMLSchema#\""
        rdfSchema = "xmlns:rdfs="+"\"http://www.w3.org/2000/01/rdf-schema#\""
        xmlMO = "xmlns:mo="+"\"http://www.morphster.org/obo/meta-obo/1.0/mo#\""
        self.rdfDeclarationOpen = "<rdf:RDF"+"\n"+rdfns+"\n"+owlns+"\n"+xmlSchema+"\n"+rdfSchema+"\n"+xmlMO+"\n"+">"    
        
    def addHeaderInformation(self,headerInformation):
        """
        Add an additional line of header information.
        Keyword arguments:
        headerInformation -- an additional of information to be added to the header.
        """
        self.headerInformation.append(headerInformation)
        
    def getAllHeaderInformation(self):
        """
        Returns all header information in a list.
        """
        return self.headerInformation
    
    def getIndividualHeaderInfo(self,i):
        """
        Returns an individual instance of header information.
        Keyword arguments:
        i -- index of the line of the header information to extract.
        """
        return self.headerInformation[i]
    
    def setFormatVersion(self,formatVersion):
        """
        Sets format version.
        Keyword arguments:
        formatVersion -- Version of OBO format in which the ontology was originally written.
        """
        self.formatVersion = formatVersion
    
    def getFormatVersion(self):
        """
        Returns format version.
        """
        return self.formatVersion
    
    def setTypeRef(self,typeRefValue):
        """
        Sets type reference.
        Keyword arguments:
        typeRefValue -- values to be converted to owl imports.
        """
        self.typeRef = typeRefValue
    
    def getTypeRef(self):
        """
        Returns type ref.
        """
        return self.typeRef
    
    def setVersion(self,versionValue):
        """
        Sets version value.
        Keyword arguments:
        versionValue -- version of the data in the ontology.
        """
        self.version = versionValue
    
    def getVersion(self):
        """
        Returns version.
        """
        return self.version
    
    def setDate(self,dateValue):
        """
        Sets date value.
        Keyword arguments:
        dateValue -- date / time of last edit.
        """
        self.date = dateValue
        
    def getDate(self):
        """
        Returns date.
        """
        return self.date
    
    def setSavedBy(self,savedByValue):
        """
        Sets saved by value.
        Keyword arguments:
        savedByValue -- User who last edited.
        """
        self.savedBy = savedByValue
        
    def getSavedBy(self):
        """
        Returns saved by value.
        """
        return self.savedBy
    
    def setAutoGeneratedBy(self,autoGeneratedByValue):
        """
        Sets auto-generated value.
        Keyword arguments:
        autoGeneratedByValue -- program used to generate the ontology.
        """
        self.autoGeneratedBy = autoGeneratedByValue
    
    def getAutoGeneratedBy(self):
        """
        Returns auto-generated by value.
        """
        return self.autoGeneratedBy
    
    def setDefaultNameSpace(self,dNS):
        """
        Sets default name space.
        Keyword arguments:
        dNS -- default namespace for the ontology.
        """
        self.defaultNameSpace = dNS
    
    def getDefaultNameSpace(self):
        """
        Returns default name space.
        """
        return self.defaultNameSpace
    
    def setRemark(self,remarkValue):
        """
        Sets remark value.
        Keyword arguments:
        remarkValue -- general comments on the ontology.
        """
        self.remark = remarkValue
        
    def getRemark(self):
        """
        Returns remark.
        """
        return self.remark
    # Maybe nicer to have a separate owl class!
    def addOWLClass(self,aNewClass):
        """
        Add new OWL class.
        Keyword arguments:
        aNewClass -- adds a new OWL class to the ontology.
        """
        self.classes.append(aNewClass)
    
    def getOWLClass(self,i):
        """
        Get an OWL class.
        Keyword arguments:
        i -- index to select.
        """
        return self.classes[i]

    def getAllOWLClasses(self):
        """
        Returns all OWL classes in the ontology.
        """
        return self.classes
    
    def addOWLProperty(self,aNewProperty):
        """
        Add new OWL:Property.
        Keyword arguments:
        aNewProperty -- adds a new OWL object property.
        """
        self.Properties.append(aNewProperty)
        
    def getAProperty(self,i):
        """
        Returns an individual OWL property
        Keyword arguments:
        i -- index to select.
        """
        return self.Properties[i]
    
    def getAllProperties(self):
        """
        Returns all properties.
        """
        return self.Properties
    
    def setNameSpaceIdRule(self,nameSpace):
        """
        Sets name space id rule.
        Keyword arguments:
        nameSpace -- sets namespace for an ontology.
        """
        self.nsIdRule = nameSpace
    
    def addSubsetDefinition(self,subsetValue):
        """
        Adds subset.
        Keyword arguments:
        subsetValue -- subset defined for the ontology.
        """
        self.headerSubsetDef.append(subsetValue)
        
    def getSubsetHeader(self):
        """
        Returns subset definitions
        """
        return self.headerSubsetDef
    
    def getIndividualSubset(self,i):
        """
        Returns individual subset header value.
        Keyword arguments:
        i -- index to select.
        """
        return self.headerSubsetDef[i]
    
    def addSubset(self,subset):
        """
        Adds subset.
        """
        self.subsetDef.append(subset)
    
    def getIndividualSubsetTerm(self,i):
        """
        Returns individual subset term value.
        Keyword arguments:
        i -- index to select.
        """
        return self.subsetDef[i]
    
    def getAllSubsetTerms(self):
        """
        Returns all subset terms.
        """
        return self.subsetDef
    
    def addOWLAnnotationPropertyHeaderInformation(self):
        """
        Defines owl:Annotation properties.
        """
        self.annotationProperties = "<owl:AnnotationProperty rdf:about=\"&mo;formatVersion\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Version of OBO format.</rdfs:comment></owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;dataVersion\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Version of data in the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;savedDateTime\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Date/time of last edit and save.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;savedBy\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>The user who last edited the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;autoGeneratedBy\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>The program used to generate the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;remark\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>General comments on the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;definedNamespace\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>A namespace defined for use in the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;defaultNamespace\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Default namespace for the ontology.</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;alternateID\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;definition\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;xrefAnalogous\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;xrefUnknown\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;xref\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;synonym\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;relatedSynonym\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;exactSynonym\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;broadSynonym\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;narrowSynonym\"/>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;isCyclic\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Represents the cyclic property. (Typedefs only)</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;isSymmetric\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Represents the symmetric property. (Typedefs only)</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"+"\n"
        self.annotationProperties = self.annotationProperties+"<owl:AnnotationProperty rdf:about=\"&mo;isTransitive\">"+"\n"
        self.annotationProperties = self.annotationProperties+"<rdfs:comment>Represents the transitive property. (Typedefs only)</rdfs:comment>"+"\n"
        self.annotationProperties = self.annotationProperties+"</owl:AnnotationProperty>"
        
